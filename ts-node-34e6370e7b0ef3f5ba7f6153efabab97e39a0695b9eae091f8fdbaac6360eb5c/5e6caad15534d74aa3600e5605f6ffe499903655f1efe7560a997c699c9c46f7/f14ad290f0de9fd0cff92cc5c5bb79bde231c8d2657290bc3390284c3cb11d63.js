"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var autoprefixer = require("autoprefixer");
var cssnano = require("cssnano");
var gulp = require("gulp");
var gulpLoadPlugins = require("gulp-load-plugins");
var merge = require("merge-stream");
var util = require("gulp-util");
var filter = require("gulp-filter");
var path_1 = require("path");
var config_1 = require("../../config");
var css_task_1 = require("../css_task");
var plugins = gulpLoadPlugins();
var gulpConcatCssConfig = config_1.default.getPluginConfig('gulp-concat-css');
var processors = [
    autoprefixer({
        browsers: config_1.default.BROWSER_LIST
    })
];
var reportPostCssError = function (e) { return util.log(util.colors.red(e.message)); };
var isProd = config_1.default.BUILD_TYPE === 'prod';
if (isProd) {
    processors.push(cssnano({
        discardComments: { removeAll: true },
        discardUnused: false,
        zindex: false,
        reduceIdents: false
    }));
}
var appSCSSFiles = path_1.join(config_1.default.APP_SRC, '**', '*.scss');
var entrySCSSFiles = path_1.join(config_1.default.CSS_SRC, '**', '*.scss');
var abstractSCSSFiles = path_1.join(config_1.default.SCSS_SRC, '**', '*.scss');
function prepareTemplates() {
    return gulp.src(path_1.join(config_1.default.APP_SRC, '**', '*.html'))
        .pipe(gulp.dest(config_1.default.TMP_DIR));
}
function processComponentStylesheets() {
    return config_1.default.ENABLE_SCSS ?
        merge(processComponentScss(), processComponentCss())
        :
            processComponentCss();
}
function processComponentScss() {
    return getSCSSFiles('process-component-scss', [appSCSSFiles], [abstractSCSSFiles])
        .pipe(plugins.sourcemaps.init())
        .pipe(plugins.sass(config_1.default.getPluginConfig('gulp-sass')).on('error', plugins.sass.logError))
        .pipe(plugins.postcss(processors))
        .on('error', reportPostCssError)
        .pipe(plugins.sourcemaps.write(isProd ? '.' : '', {
        sourceMappingURL: function (file) {
            return "" + config_1.default.APP_BASE + file.relative + ".map";
        }
    }))
        .pipe(gulp.dest(isProd ? config_1.default.TMP_DIR : config_1.default.APP_DEST));
}
function getSCSSFiles(cacheName, filesToCompile, filesToExclude) {
    if (filesToExclude === void 0) { filesToExclude = []; }
    var allFiles = filesToCompile.concat(filesToExclude);
    var filteredFiles = filesToCompile.concat(filesToExclude.map(function (path) { return '!' + path; }));
    return gulp.src(allFiles)
        .pipe(plugins.cached(cacheName))
        .pipe(plugins.progeny())
        .pipe(filter(filteredFiles));
}
function processComponentCss() {
    return gulp.src([
        path_1.join(config_1.default.APP_SRC, '**', '*.css'),
        '!' + path_1.join(config_1.default.APP_SRC, 'assets', '**', '*.css')
    ])
        .pipe(isProd ? plugins.cached('process-component-css') : plugins.util.noop())
        .pipe(plugins.postcss(processors))
        .on('error', reportPostCssError)
        .pipe(gulp.dest(isProd ? config_1.default.TMP_DIR : config_1.default.APP_DEST));
}
function processExternalStylesheets() {
    return config_1.default.ENABLE_SCSS ? processAllExternalStylesheets() : processExternalCss();
}
function processAllExternalStylesheets() {
    return merge(getExternalCssStream(), getExternalScssStream())
        .pipe(isProd ? plugins.concatCss(gulpConcatCssConfig.targetFile, gulpConcatCssConfig.options) : plugins.util.noop())
        .pipe(plugins.postcss(processors))
        .on('error', reportPostCssError)
        .pipe(gulp.dest(config_1.default.CSS_DEST));
}
function getExternalCssStream() {
    return gulp.src(getExternalCss())
        .pipe(isProd ? plugins.cached('process-external-css') : plugins.util.noop());
}
function getExternalCss() {
    return config_1.default.DEPENDENCIES.filter(function (dep) { return /\.css$/.test(dep.src); }).map(function (dep) { return dep.src; });
}
function getExternalScssStream() {
    return getSCSSFiles('process-external-scss', getExternalScss(), [abstractSCSSFiles])
        .pipe(plugins.sass(config_1.default.getPluginConfig('gulp-sass')).on('error', plugins.sass.logError));
}
function getExternalScss() {
    return config_1.default.DEPENDENCIES.filter(function (dep) { return /\.scss$/.test(dep.src); }).map(function (dep) { return dep.src; })
        .concat([entrySCSSFiles]);
}
function processExternalCss() {
    return getExternalCssStream()
        .pipe(plugins.postcss(processors))
        .pipe(isProd ? plugins.concatCss(gulpConcatCssConfig.targetFile, gulpConcatCssConfig.options) : plugins.util.noop())
        .on('error', reportPostCssError)
        .pipe(gulp.dest(config_1.default.CSS_DEST));
}
module.exports = (function (_super) {
    __extends(BuildHtmlCss, _super);
    function BuildHtmlCss() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BuildHtmlCss.prototype.shallRun = function (files) {
        return _super.prototype.shallRun.call(this, files) || files.some(function (f) { return f.endsWith('.html'); });
    };
    BuildHtmlCss.prototype.run = function () {
        return merge(processComponentStylesheets(), prepareTemplates(), processExternalStylesheets());
    };
    return BuildHtmlCss;
}(css_task_1.CssTask));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,