"use strict";
var gulp = require("gulp");
var gulpLoadPlugins = require("gulp-load-plugins");
var path_1 = require("path");
var slash = require("slash");
var config_1 = require("../../config");
var utils_1 = require("../../utils");
var plugins = gulpLoadPlugins();
function inject(name) {
    return plugins.inject(gulp.src(getInjectablesDependenciesRef(name), { read: false }), {
        name: name,
        transform: transformPath()
    });
}
function getInjectablesDependenciesRef(name) {
    return config_1.default.DEPENDENCIES
        .filter(function (dep) { return dep['inject'] && dep['inject'] === (name || true); })
        .map(mapPath);
}
function mapPath(dep) {
    var envPath = dep.src;
    if (envPath.startsWith(config_1.default.APP_SRC) && !envPath.endsWith('.scss')) {
        envPath = path_1.join(config_1.default.APP_DEST, envPath.replace(config_1.default.APP_SRC, ''));
    }
    else if (envPath.startsWith(config_1.default.APP_SRC) && envPath.endsWith('.scss')) {
        envPath = envPath
            .replace(config_1.default.ASSETS_SRC, config_1.default.CSS_DEST)
            .replace('.scss', '.css');
    }
    return envPath;
}
function transformPath() {
    return function (filepath) {
        if (filepath.startsWith("/" + config_1.default.APP_DEST)) {
            filepath = filepath.replace("/" + config_1.default.APP_DEST, '');
        }
        arguments[0] = path_1.join(config_1.default.APP_BASE, filepath);
        var queryString = config_1.default.QUERY_STRING_GENERATOR();
        if (queryString) {
            arguments[0] += "?" + queryString;
        }
        return slash(plugins.inject.transform.apply(plugins.inject.transform, arguments));
    };
}
module.exports = function () {
    return gulp
        .src(path_1.join(config_1.default.APP_SRC, 'index.html'))
        .pipe(inject('shims'))
        .pipe(inject('libs'))
        .pipe(inject())
        .pipe(plugins.template(new utils_1.TemplateLocalsBuilder().withoutStringifiedEnvConfig().build(), config_1.default.TEMPLATE_CONFIG))
        .pipe(gulp.dest(config_1.default.APP_DEST));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21lZGlhL2RhbGl5YS9DMjcyRDdGRTcyRDdGNTVGL0dpdGh1YiBwcm9qZWN0cy9Bbmd1bGFyLTItRXZlbnRFbWl0dGVyLS90b29scy90YXNrcy9zZWVkL2J1aWxkLmluZGV4LmRldi50cyIsInNvdXJjZXMiOlsiL21lZGlhL2RhbGl5YS9DMjcyRDdGRTcyRDdGNTVGL0dpdGh1YiBwcm9qZWN0cy9Bbmd1bGFyLTItRXZlbnRFbWl0dGVyLS90b29scy90YXNrcy9zZWVkL2J1aWxkLmluZGV4LmRldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMkJBQTZCO0FBQzdCLG1EQUFxRDtBQUNyRCw2QkFBNEI7QUFDNUIsNkJBQStCO0FBRS9CLHVDQUFrQztBQUNsQyxxQ0FBb0Q7QUFFcEQsSUFBTSxPQUFPLEdBQVEsZUFBZSxFQUFFLENBQUM7QUF3QnZDLGdCQUFnQixJQUFhO0lBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQzlEO1FBQ0UsSUFBSSxNQUFBO1FBQ0osU0FBUyxFQUFFLGFBQWEsRUFBRTtLQUMzQixDQUNGLENBQUM7QUFDSixDQUFDO0FBTUQsdUNBQXVDLElBQWE7SUFDbEQsTUFBTSxDQUFDLGdCQUFNLENBQUMsWUFBWTtTQUN2QixNQUFNLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFqRCxDQUFpRCxDQUFDO1NBQ2hFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBTUQsaUJBQWlCLEdBQVE7SUFDdkIsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUN0QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGdCQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxPQUFPLEdBQUcsV0FBSSxDQUFDLGdCQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRSxPQUFPLEdBQUcsT0FBTzthQUNkLE9BQU8sQ0FBQyxnQkFBTSxDQUFDLFVBQVUsRUFBRSxnQkFBTSxDQUFDLFFBQVEsQ0FBQzthQUMzQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFNRDtJQUNFLE1BQU0sQ0FBQyxVQUFTLFFBQWdCO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBSSxnQkFBTSxDQUFDLFFBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFJLGdCQUFNLENBQUMsUUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFDRCxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBSSxDQUFDLGdCQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLElBQU0sV0FBVyxHQUFHLGdCQUFNLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNwRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFJLFdBQWEsQ0FBQztRQUNwQyxDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FDVixPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQ3BFLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBekVELGlCQUFTO0lBQ1AsTUFBTSxDQUFDLElBQUk7U0FDUixHQUFHLENBQUMsV0FBSSxDQUFDLGdCQUFNLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZCxJQUFJLENBQ0gsT0FBTyxDQUFDLFFBQVEsQ0FDZCxJQUFJLDZCQUFxQixFQUFFLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFDakUsZ0JBQU0sQ0FBQyxlQUFlLENBQ3ZCLENBQ0Y7U0FDQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZ3VscCBmcm9tICdndWxwJztcbmltcG9ydCAqIGFzIGd1bHBMb2FkUGx1Z2lucyBmcm9tICdndWxwLWxvYWQtcGx1Z2lucyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBzbGFzaCBmcm9tICdzbGFzaCc7XG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IFRlbXBsYXRlTG9jYWxzQnVpbGRlciB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuY29uc3QgcGx1Z2lucyA9IDxhbnk+Z3VscExvYWRQbHVnaW5zKCk7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIGJ1aWxkIHByb2Nlc3MsIGluamVjdGluZyB0aGUgc2hpbXMgYW5kIGxpYnMgaW50byB0aGUgYGluZGV4LmhtbGAgZm9yIHRoZSBkZXZlbG9wbWVudCBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0ID0gKCkgPT4ge1xuICByZXR1cm4gZ3VscFxuICAgIC5zcmMoam9pbihDb25maWcuQVBQX1NSQywgJ2luZGV4Lmh0bWwnKSlcbiAgICAucGlwZShpbmplY3QoJ3NoaW1zJykpXG4gICAgLnBpcGUoaW5qZWN0KCdsaWJzJykpXG4gICAgLnBpcGUoaW5qZWN0KCkpXG4gICAgLnBpcGUoXG4gICAgICBwbHVnaW5zLnRlbXBsYXRlKFxuICAgICAgICBuZXcgVGVtcGxhdGVMb2NhbHNCdWlsZGVyKCkud2l0aG91dFN0cmluZ2lmaWVkRW52Q29uZmlnKCkuYnVpbGQoKSxcbiAgICAgICAgQ29uZmlnLlRFTVBMQVRFX0NPTkZJR1xuICAgICAgKVxuICAgIClcbiAgICAucGlwZShndWxwLmRlc3QoQ29uZmlnLkFQUF9ERVNUKSk7XG59O1xuXG4vKipcbiAqIEluamVjdHMgdGhlIGZpbGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGZpbGUgdG8gYmUgaW5qZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGluamVjdChuYW1lPzogc3RyaW5nKSB7XG4gIHJldHVybiBwbHVnaW5zLmluamVjdChcbiAgICBndWxwLnNyYyhnZXRJbmplY3RhYmxlc0RlcGVuZGVuY2llc1JlZihuYW1lKSwgeyByZWFkOiBmYWxzZSB9KSxcbiAgICB7XG4gICAgICBuYW1lLFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1QYXRoKClcbiAgICB9XG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW5qZWN0YWJsZSBkZXBlbmRlbmN5LCBtYXBwaW5nIGl0cyBmaWxlbmFtZSB0byBpdHMgcGF0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGRlcGVuZGVuY3kgdG8gYmUgbWFwcGVkLlxuICovXG5mdW5jdGlvbiBnZXRJbmplY3RhYmxlc0RlcGVuZGVuY2llc1JlZihuYW1lPzogc3RyaW5nKSB7XG4gIHJldHVybiBDb25maWcuREVQRU5ERU5DSUVTXG4gICAgLmZpbHRlcihkZXAgPT4gZGVwWydpbmplY3QnXSAmJiBkZXBbJ2luamVjdCddID09PSAobmFtZSB8fCB0cnVlKSlcbiAgICAubWFwKG1hcFBhdGgpO1xufVxuXG4vKipcbiAqIE1hcHMgdGhlIHBhdGggb2YgdGhlIGdpdmVuIGRlcGVuZGVuY3kgdG8gaXRzIHBhdGggYWNjb3JkaW5nIHRvIHRoZSBhcHBsaWNhdGlvbnMgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0ge2FueX0gZGVwIC0gVGhlIGRlcGVuZGVuY3kgdG8gYmUgbWFwcGVkLlxuICovXG5mdW5jdGlvbiBtYXBQYXRoKGRlcDogYW55KSB7XG4gIGxldCBlbnZQYXRoID0gZGVwLnNyYztcbiAgaWYgKGVudlBhdGguc3RhcnRzV2l0aChDb25maWcuQVBQX1NSQykgJiYgIWVudlBhdGguZW5kc1dpdGgoJy5zY3NzJykpIHtcbiAgICBlbnZQYXRoID0gam9pbihDb25maWcuQVBQX0RFU1QsIGVudlBhdGgucmVwbGFjZShDb25maWcuQVBQX1NSQywgJycpKTtcbiAgfSBlbHNlIGlmIChlbnZQYXRoLnN0YXJ0c1dpdGgoQ29uZmlnLkFQUF9TUkMpICYmIGVudlBhdGguZW5kc1dpdGgoJy5zY3NzJykpIHtcbiAgICBlbnZQYXRoID0gZW52UGF0aFxuICAgICAgLnJlcGxhY2UoQ29uZmlnLkFTU0VUU19TUkMsIENvbmZpZy5DU1NfREVTVClcbiAgICAgIC5yZXBsYWNlKCcuc2NzcycsICcuY3NzJyk7XG4gIH1cbiAgcmV0dXJuIGVudlBhdGg7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBwYXRoIG9mIGEgZGVwZW5kZW5jeSB0byBpdHMgbG9jYXRpb24gd2l0aGluIHRoZSBgZGlzdGAgZGlyZWN0b3J5IGFjY29yZGluZyB0byB0aGUgYXBwbGljYXRpb25zXG4gKiBlbnZpcm9ubWVudC5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtUGF0aCgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGZpbGVwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAoZmlsZXBhdGguc3RhcnRzV2l0aChgLyR7Q29uZmlnLkFQUF9ERVNUfWApKSB7XG4gICAgICBmaWxlcGF0aCA9IGZpbGVwYXRoLnJlcGxhY2UoYC8ke0NvbmZpZy5BUFBfREVTVH1gLCAnJyk7XG4gICAgfVxuICAgIGFyZ3VtZW50c1swXSA9IGpvaW4oQ29uZmlnLkFQUF9CQVNFLCBmaWxlcGF0aCk7XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBDb25maWcuUVVFUllfU1RSSU5HX0dFTkVSQVRPUigpO1xuICAgIGlmIChxdWVyeVN0cmluZykge1xuICAgICAgYXJndW1lbnRzWzBdICs9IGA/JHtxdWVyeVN0cmluZ31gO1xuICAgIH1cbiAgICByZXR1cm4gc2xhc2goXG4gICAgICBwbHVnaW5zLmluamVjdC50cmFuc2Zvcm0uYXBwbHkocGx1Z2lucy5pbmplY3QudHJhbnNmb3JtLCBhcmd1bWVudHMpXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==