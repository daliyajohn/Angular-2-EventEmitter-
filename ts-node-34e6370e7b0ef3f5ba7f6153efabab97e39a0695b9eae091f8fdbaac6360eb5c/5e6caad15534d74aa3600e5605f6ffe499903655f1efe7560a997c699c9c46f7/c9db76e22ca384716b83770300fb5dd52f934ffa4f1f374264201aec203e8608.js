"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var util = require("gulp-util");
var fs_1 = require("fs");
var path_1 = require("path");
var config_1 = require("../../config");
var isWin = /^win/.test(process.platform);
function createSME(taskName) {
    return function () {
        var sme = './node_modules/.bin/source-map-explorer';
        if (isWin) {
            sme = '.\\node_modules\\.bin\\source-map-explorer.cmd';
        }
        var task = taskName.replace(/\./g, '_');
        var outFileName = task + "_" + now() + "." + config_1.default.SME_OUT_FORMAT;
        var out = path_1.join(config_1.default.SME_DIR, outFileName);
        var appBundle = path_1.join(config_1.default.JS_DEST, config_1.default.JS_PROD_APP_BUNDLE);
        var appBundleMap = appBundle + ".map";
        if (!fs_1.existsSync(config_1.default.SME_DIR)) {
            fs_1.mkdirSync(config_1.default.SME_DIR);
        }
        child_process_1.exec(sme + " --" + config_1.default.SME_OUT_FORMAT + " " + appBundle + " " + appBundleMap + " > " + out, function (error, stdout, stderr) {
            if (error !== null) {
                console.error(util.colors.red.bold('source-map-explorer error: ' + error + stderr));
                process.exit(1);
            }
        });
    };
}
exports.createSME = createSME;
function now() {
    var date = new Date();
    return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
        .toISOString()
        .replace(/[:.]/g, '_');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21lZGlhL2RhbGl5YS9DMjcyRDdGRTcyRDdGNTVGL0dpdGh1YiBwcm9qZWN0cy9Bbmd1bGFyLTItRXZlbnRFbWl0dGVyLS90b29scy91dGlscy9zZWVkL3NtZS50cyIsInNvdXJjZXMiOlsiL21lZGlhL2RhbGl5YS9DMjcyRDdGRTcyRDdGNTVGL0dpdGh1YiBwcm9qZWN0cy9Bbmd1bGFyLTItRXZlbnRFbWl0dGVyLS90b29scy91dGlscy9zZWVkL3NtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUFxQztBQUNyQyxnQ0FBa0M7QUFDbEMseUJBQTJDO0FBQzNDLDZCQUE0QjtBQUU1Qix1Q0FBa0M7QUFFbEMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFNNUMsbUJBQTBCLFFBQWdCO0lBQ3hDLE1BQU0sQ0FBQztRQUNMLElBQUksR0FBRyxHQUFHLHlDQUF5QyxDQUFDO1FBRXBELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDVixHQUFHLEdBQUcsZ0RBQWdELENBQUM7UUFDekQsQ0FBQztRQUVELElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLElBQU0sV0FBVyxHQUFNLElBQUksU0FBSSxHQUFHLEVBQUUsU0FBSSxnQkFBTSxDQUFDLGNBQWdCLENBQUM7UUFDaEUsSUFBTSxHQUFHLEdBQUcsV0FBSSxDQUFDLGdCQUFNLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTlDLElBQU0sU0FBUyxHQUFHLFdBQUksQ0FBQyxnQkFBTSxDQUFDLE9BQU8sRUFBRSxnQkFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEUsSUFBTSxZQUFZLEdBQU0sU0FBUyxTQUFNLENBQUM7UUFFeEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFVLENBQUMsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsY0FBUyxDQUFDLGdCQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELG9CQUFJLENBQUksR0FBRyxXQUFNLGdCQUFNLENBQUMsY0FBYyxTQUFJLFNBQVMsU0FBSSxZQUFZLFdBQU0sR0FBSyxFQUM1RSxVQUFDLEtBQVksRUFBRSxNQUFjLEVBQUUsTUFBYztZQUMzQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3BGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQTFCRCw4QkEwQkM7QUFFRDtJQUNFLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDeEIsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQ2pFLFdBQVcsRUFBRTtTQUNiLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnZ3VscC11dGlsJztcbmltcG9ydCB7IGV4aXN0c1N5bmMsIG1rZGlyU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5jb25zdCBpc1dpbiA9IC9ed2luLy50ZXN0KHByb2Nlc3MucGxhdGZvcm0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzb3VyY2UtbWFwLWV4cGxvcmVyIHJlcG9ydCB3aXRoIHRoZSBnaXZlbiB0YXNrIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFza05hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdGFzay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNNRSh0YXNrTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiAoKTogdm9pZCA9PiB7XG4gICAgbGV0IHNtZSA9ICcuL25vZGVfbW9kdWxlcy8uYmluL3NvdXJjZS1tYXAtZXhwbG9yZXInO1xuXG4gICAgaWYgKGlzV2luKSB7XG4gICAgICBzbWUgPSAnLlxcXFxub2RlX21vZHVsZXNcXFxcLmJpblxcXFxzb3VyY2UtbWFwLWV4cGxvcmVyLmNtZCc7XG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IHRhc2tOYW1lLnJlcGxhY2UoL1xcLi9nLCAnXycpO1xuICAgIGNvbnN0IG91dEZpbGVOYW1lID0gYCR7dGFza31fJHtub3coKX0uJHtDb25maWcuU01FX09VVF9GT1JNQVR9YDtcbiAgICBjb25zdCBvdXQgPSBqb2luKENvbmZpZy5TTUVfRElSLCBvdXRGaWxlTmFtZSk7XG5cbiAgICBjb25zdCBhcHBCdW5kbGUgPSBqb2luKENvbmZpZy5KU19ERVNULCBDb25maWcuSlNfUFJPRF9BUFBfQlVORExFKTtcbiAgICBjb25zdCBhcHBCdW5kbGVNYXAgPSBgJHthcHBCdW5kbGV9Lm1hcGA7XG5cbiAgICBpZiAoIWV4aXN0c1N5bmMoQ29uZmlnLlNNRV9ESVIpKSB7XG4gICAgICBta2RpclN5bmMoQ29uZmlnLlNNRV9ESVIpO1xuICAgIH1cbiAgICBleGVjKGAke3NtZX0gLS0ke0NvbmZpZy5TTUVfT1VUX0ZPUk1BVH0gJHthcHBCdW5kbGV9ICR7YXBwQnVuZGxlTWFwfSA+ICR7b3V0fWAsXG4gICAgICAoZXJyb3I6IEVycm9yLCBzdGRvdXQ6IHN0cmluZywgc3RkZXJyOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcih1dGlsLmNvbG9ycy5yZWQuYm9sZCgnc291cmNlLW1hcC1leHBsb3JlciBlcnJvcjogJyArIGVycm9yICsgc3RkZXJyKSk7XG4gICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm93KCk6IHN0cmluZyB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSAoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDApKVxuICAgIC50b0lTT1N0cmluZygpXG4gICAgLnJlcGxhY2UoL1s6Ll0vZywgJ18nKTtcbn1cbiJdfQ==